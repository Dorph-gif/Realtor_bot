import logging
import re
import os
from typing import Optional, List
from dotenv import load_dotenv
from io import BytesIO

from telethon import TelegramClient, events, Button
from telethon.types import InputMediaPhoto
from telethon.types import MessageMediaPhoto
from telethon.types import MessageMediaDocument
from fastapi import UploadFile
import xmltodict
import pandas as pd
from urllib.parse import urlencode
import aiohttp
import requests

from src.bot_logic.state_machine import get_state_machine
from src.bot_logic.utils import is_admin, go_to_neutral_state, send_property_info
from src.bot_logic.database_service_client import get_database_service_client

load_dotenv()

LOG_FILE = os.path.join("logs", "add_property.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=LOG_FILE,
)
logger = logging.getLogger(__name__)

def get_property_type(pr_type: str):
    if pr_type == "–ö–≤–∞—Ä—Ç–∏—Ä—ã":
        return "–∫–≤–∞—Ä—Ç–∏—Ä–∞"
    if pr_type == "–î–æ–º–∞, –¥–∞—á–∏, –∫–æ—Ç—Ç–µ–¥–∂–∏":
        return "–¥–æ–º"
    if pr_type == "–ö–æ–º–Ω–∞—Ç—ã":
        return "–∫–æ–º–Ω–∞—Ç–∞"
    if pr_type == "–ó–µ–º–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏":
        return "—É—á–∞—Å—Ç–æ–∫"
    if pr_type == "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
        return "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è"
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä Category")

def get_rooms(rooms: str):
    if rooms == "–°—Ç—É–¥–∏—è":
        return 1
    if rooms == "10 –∏ –±–æ–ª–µ–µ":
        return 10
    if rooms == "–°–≤–æ–±. –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞":
        return 0
    try:
        return int(rooms)
    except:
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω–æ –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 1-9, –°—Ç—É–¥–∏—è, 10 –∏ –±–æ–ª–µ–µ, –°–≤–æ–±. –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞")

async def get_image(image_url: str) -> bytes:
    async with aiohttp.ClientSession() as session:
        image_url = image_url.strip()
        url_type = image_url.removeprefix("https://").removeprefix("http://")
        logger.info(f"url_type: {url_type}, image_url: {image_url}")

        if url_type.startswith("disk.yandex.ru"):
            public_key = image_url.rsplit('/', 1)[-1]
            base_url = 'https://cloud-api.yandex.net/v1/disk/public/resources/download?'
            public_key = image_url

            final_url = base_url + urlencode(dict(public_key=public_key))
            response = requests.get(final_url)
            download_url = response.json()['href']

            async with session.get(download_url) as file_resp:
                if file_resp.status != 200:
                    raise Exception(f"Failed to download image: {file_resp.status}")
                return await file_resp.read()

        else:
            async with session.get(image_url) as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to download image: {resp.status}")
                return await resp.read()

class AddPropertyFileHandler:
    def __init__(self, client: TelegramClient):
        self.client = client
        self.property_params = {}

    def register_handlers(self):
        self.client.add_event_handler(
            self.execute_load,
            events.NewMessage(),
        )
        self.client.add_event_handler(
            self.execute_start,
            events.NewMessage(pattern="/new_property_file"),
        )
        self.client.add_event_handler(
            self.execute_start,
            events.CallbackQuery(data="/new_property_file"),
        )

    async def execute_start(self, event):
        user_id = event.sender_id

        if not await is_admin(self.client, user_id):
            await self.client.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return

        logger.info(f"User {user_id} started property process")

        state_machine = get_state_machine()
        state_machine.starting_load_by_file_property(user_id)

        message = "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        message+="–®–∞–±–ª–æ–Ω: https://www.avito.ru/autoload/documentation/templates/67068\n"

        message += "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: Category, OperationType, Price, Description, \
            ImageUrls (—Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ø–∞–¥—É—Ç –ø–µ—Ä–≤—ã–µ 10)\n"
        message += "–ü–æ–ª—è, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é: Id, BalconyOrLoggiaMulti, MarketType, Square, Floor, Floors, DepositAmount\n"


        await self.client.send_message(user_id, message)

    async def execute_load(self, event):
        user_id = event.chat_id
        state_machine = get_state_machine()

        logger.info("–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {user_id}")

        if state_machine.get_state(user_id) != "LOADING_FILE":
            return
        
        if not event.file or not event.file.name.endswith('.xlsx'):
            await self.client.send_message(user_id, "–§–∞–π–ª –æ—Ç—Å—Ç—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É: –ø—Ä–∏—à–ª–∏—Ç–µ .xlsx —Ñ–∞–π–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω—É: https://www.avito.ru/autoload/documentation/templates")

        file_path = await event.download_media()

        xls = pd.ExcelFile(file_path)
        sheet_name = xls.sheet_names[1]

        df = pd.read_excel(
            xls,
            sheet_name=sheet_name,
            header=1,
            skiprows=[2, 3]
        )

        df.dropna(how='all', inplace=True)
        
        message = ""

        for _, row in df.iterrows():
            logger.info(f"Processing_property: {row}")
            property_id = 0
            try:
                payload = {}
                payload["return_contact"] = str(user_id)
                pr_type = row.get("Category", "–ö–≤–∞—Ä—Ç–∏—Ä—ã")
                payload["property_type"] = get_property_type(pr_type)
                op_type = row.get("OperationType", "–ü—Ä–æ–¥–∞–º")
                payload["deal_type"] = ("–ø—Ä–æ–¥–∞–∂–∞" if op_type == "–ü—Ä–æ–¥–∞–º" else "–∞—Ä–µ–Ω–¥–∞")
                payload["price"] = int(row.get("Price", 10))
                try: 
                    payload["city"] = row.get("Address", "o, –ù–µ —É–∫–∞–∑–∞–Ω–æ").split(",")[1].strip()
                except:
                    message += f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å id: {row.get('Id', 'id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}, –Ω–µ –Ω–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥: –∑–∞–¥–∞–π—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ç–æ—Ä—ã–º –≤ –∞–¥—Ä–µ—Å–µ(–æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥)\n"
                    continue
                payload["area"] = None
                payload["street"] = ""
                payload["house_number"] = ""
                payload["apartment_numder"] = ""
                rooms = row.get("Rooms", "1")
                payload["rooms"] = get_rooms(rooms)
                payload["balcony"] = bool(len(row.get("BalconyOrLoggiaMulti", "")) > 0)
                payload["renovated"] = "–î–∞" if row.get("MarketType", "–í—Ç–æ—Ä–∏—á–∫–∞") == "–í—Ç–æ—Ä–∏—á–∫–∞" else "–ù–µ—Ç"
                payload["total_area"] = int(float(row.get("Square", "0")))
                payload["floor"] = int(row.get("Floor", "1"))
                payload["total_floors"] = int(row.get("Floors", "1"))
                payload["deposit"] = int(row.get("DepositAmount", "0"))
                payload["description"] = row.get("Description", "")

                image_urls = str(row.get("ImageUrls", "")).split('|')

                image_urls = image_urls[:10]

                logger.info(f"got property: {payload}, images: {image_urls}")

                database_client = get_database_service_client()
                respond = await database_client.new_property(user_id, payload)
                property_id = respond["property_id"]

                count = 0
                for image_url in image_urls:
                    logger.info(f"Uploading image for property {property_id}")
                    image = await get_image(image_url)
                    await database_client.upload_image(property_id, count, image)
                    count += 1

                message += f"–û–±—ä–µ–∫—Ç {row.get('Id', 'id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.\n"

                for user in respond["users_id"]:
                    message = "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø–æ–¥—ä–æ–¥—è—â–µ–µ –ø–æ–¥ –≤–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã!"
                    buttons = [ 
                        [Button.inline("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∏–µ–ª—Ç–æ—Ä–æ–º ü§ù", f"like:-:{property_id}")],
                        [Button.inline("–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è", f"to_favorites:{property_id}")],
                        [Button.inline("–í –º–µ–Ω—é", "/start")]
                    ]

                    await send_property_info(self.client, user["telegram_id"], property_id, message=message, buttons=buttons)
                    await database_client.increase_statistics(property_id, "views")                
            except Exception as e:
                logger.info(f"Error loading property by file: {e}")
                database_client = get_database_service_client()
                respond = await database_client.delete_property(property_id)
                message += f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å id: {row.get('Id', 'id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"

            await self.client.send_message(user_id, message)
            await go_to_neutral_state(user_id, self.client)



