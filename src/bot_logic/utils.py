import io
import os
import logging

from telethon import TelegramClient, events, Button
from telethon.types import User
from telethon.types import MessageMediaPhoto
from telethon.types import InputMediaPhoto
from fastapi import UploadFile
from typing import List
import base64

from src.bot_logic.database_service_client import get_database_service_client
from src.bot_logic.state_machine import get_state_machine
from src.bot_logic.messages import MESSAGES

LOG_FILE = os.path.join("logs", "bot.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=LOG_FILE,
)
logger = logging.getLogger(__name__)

async def is_admin(client: TelegramClient, user_id: int) -> bool:
    try:
        database_service = get_database_service_client()

        return await database_service.is_admin(user_id)
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return False

async def go_to_neutral_state(user_id, client: TelegramClient):
    state_machine = get_state_machine()
    state_machine.go_neutral(user_id)

    buttons = []

    is_user_admin = await is_admin(client, user_id)
    logger.info(f"User {user_id} is admin: {is_user_admin}")

    if is_user_admin:
        buttons.append([Button.inline("–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "/new_property")])
        buttons.append([Button.inline("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "show_properties:0")])
        buttons.append([Button.inline("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/get_statistics")])
        buttons.append([Button.inline("–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º", "/unregister_admin")])
    else:
        buttons = [
            [Button.inline("–ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä ‚ùáÔ∏è", "/new_filter")],
            [Button.inline("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üßæ", "/help")],
            [Button.inline("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è", "/favorites_list:0")],
            [Button.inline("–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã üà¥", "/filters_list")],
            [Button.inline("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä üÜô", "/update_filter")],
            [Button.inline("–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä ‚ùå", "/delete_filter")],
            [Button.inline("–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è üëÄ", "/search")],
            # —ç—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –±—É–¥–µ—Ç –¥–æ–ø–æ–ª—å–Ω—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        ]

    await client.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö!", buttons=buttons)
    return

async def send_current_state_message(user_id, client: TelegramClient):
    state_machine = get_state_machine()
    command_state = state_machine.get_state(user_id)
    state = "NEUTRAL"

    if command_state == "PROPERTY_FILTERS":
        state = state_machine.get_property_state(user_id)

    state_key = command_state+":"+state

    if state_key in MESSAGES:
        message, buttons = MESSAGES[state_key]
        await client.send_message(user_id, message, buttons=buttons)
    else:
        await client.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ –º–µ–Ω—é...")
        await go_to_neutral_state(user_id, client)

    return

async def get_user_link(client: TelegramClient, user_id: int) -> str:
    try:
        entity = await client.get_entity(user_id)
        if isinstance(entity, User) and entity.username:
            return f"t.me/{entity.username}"
        else:
            return f"ID: {user_id}"
    except Exception as e:
        return f"ID: {user_id}"
    
def format_filter_message(filter_info):
    message = f"–§–∏–ª—å—Ç—Ä: {filter_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

    if 'property_type' in filter_info and filter_info['property_type']:
        message += f"–¢–∏–ø: {filter_info['property_type']}\n"
    else:
        message += "–¢–∏–ø: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    if 'city' in filter_info and filter_info['city']:
        message += f"–ì–æ—Ä–æ–¥: {filter_info['city']}\n"
    else:
        message += "–ì–æ—Ä–æ–¥: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    if 'areas' in filter_info and filter_info['areas']:
        message += f"–†–∞–π–æ–Ω—ã: {filter_info['areas']}\n"
    else:
        message += "–†–∞–π–æ–Ω—ã: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    def format_range(min_value, max_value, label):
        if min_value is not None and max_value is not None:
            return f"{label}: {min_value}-{max_value}\n"
        elif min_value is not None:
            return f"{label}: –æ—Ç {min_value}\n"
        elif max_value is not None:
            return f"{label}: –¥–æ {max_value}\n"
        else:
            return f"{label}: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    message += format_range(filter_info.get('min_price'), filter_info.get('max_price'), "–¶–µ–Ω–∞")
    message += format_range(filter_info.get('min_total_area'), filter_info.get('max_total_area'), "–ü–ª–æ—â–∞–¥—å")
    message += format_range(filter_info.get('min_rooms'), filter_info.get('max_rooms'), "–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç")
    message += format_range(filter_info.get('min_deposit'), filter_info.get('max_deposit'), "–î–µ–ø–æ–∑–∏—Ç")

    message += f"–ë–∞–ª–∫–æ–Ω: {'–î–∞' if filter_info.get('balcony', False) else '–ù–µ—Ç'}\n"

    renovated = filter_info.get('renovated')
    if renovated == 'yes':
        message += "–†–µ–º–æ–Ω—Ç: –° —Ä–µ–º–æ–Ω—Ç–æ–º\n"
    elif renovated == 'no':
        message += "–†–µ–º–æ–Ω—Ç: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–º–æ–Ω—Ç\n"
    else:
        message += "–†–µ–º–æ–Ω—Ç: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    floor = filter_info.get('floor')
    if floor is not None:
        message += f"–≠—Ç–∞–∂: {floor}\n"
    else:
        message += "–≠—Ç–∞–∂: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    total_floors = filter_info.get('total_floors')
    if total_floors is not None:
        message += f"–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π: {total_floors}\n"
    else:
        message += "–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    message += f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if filter_info.get('is_active', False) else '–ù–µ—Ç'}\n"

    return message

async def send_filter_info(client, user_id: int, filter_id: int):
    database_service = get_database_service_client()
    try:
        filter_info = await database_service.get_property_filter(filter_id)
        if not filter_info:
            await client.send_message(user_id, "–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        logger.info(f"Filter info: {filter_info}")
        message = format_filter_message(filter_info)

        await client.send_message(user_id, message)
    except Exception as e:
        await client.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å—Ç—Ä–µ.")
        logger.error(f"Error getting filter info: {e}")

async def media_to_upload_file(client: TelegramClient, media: MessageMediaPhoto) -> UploadFile | None:
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {media}")
    try:
        photo_bytes = await client.download_media(media, bytes)
        logger.info(f"Got here 1 type:{type(photo_bytes)}")

        if photo_bytes is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª.")
            return None
        
        return photo_bytes

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
        return None

async def send_property_info(client: TelegramClient, user_id: int, property_id: int, message="", is_admin=False, buttons=None):
    datatbase_service = get_database_service_client()

    try:
        property_info = await datatbase_service.get_property_description(property_id)
        if not property_info:
            await client.send_message(user_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            go_to_neutral_state(user_id, client)
            return

        logger.info(f"Property info: {property_info}")
        
        message += "\n"
        message += f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {property_info.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"

        message += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {property_info.get('state', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"–ê–¥—Ä–µ—Å: {property_info.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        message += "{property_info.get('area', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        message += "{property_info.get('street', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        message += "{property_info.get('house_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        message += "{property_info.get('apartment_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        
        message += f"–¢–∏–ø: {property_info.get('property_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"–¢–∏–ø —Å–¥–µ–ª–∫–∏: {property_info.get('deal_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"–¶–µ–Ω–∞: {property_info.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        message += f"–î–µ–ø–æ–∑–∏—Ç: {property_info.get('deposit', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {property_info.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"

        message += "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"

        message += f"–ö–æ–º–Ω–∞—Ç: {property_info.get('rooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"–ü–ª–æ—â–∞–¥—å: {property_info.get('total_area', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"–≠—Ç–∞–∂: {property_info.get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π: {property_info.get('total_floors', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        message += f"–ë–∞–ª–∫–æ–Ω: {'–î–∞' if property_info.get('balcony', False) else '–ù–µ—Ç'}\n"
        message += f"–†–µ–º–æ–Ω—Ç: {property_info.get('renovated', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        photos_bytes = await datatbase_service.get_property_photos(property_id)

        if not photos_bytes:
            await client.send_message(user_id, "–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
            return
        
        photos = []

        for photo_bytes in photos_bytes:
            photo = await client.upload_file(
                file=photo_bytes,
                file_name="photo.jpg",
            )
            photos.append(photo)
        
        logger.info(f"Got {len(photos)} photos for property {property_id}")

        if await datatbase_service.is_admin(user_id) and buttons == None:
            buttons = [
                    [Button.inline("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", f"get_property_statistics:{property_id}"), 
                    Button.inline("–°–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ", f"property_back_active:{property_id}")],
                    [Button.inline("–í –∞—Ä–µ–Ω–¥–µ", f"become_rented_property:{property_id}"),
                    Button.inline("–ü—Ä–æ–¥–∞–Ω–æ", f"sold_property:{property_id}")],
                    [Button.inline("–£–¥–∞–ª–∏—Ç—å", f"delete_property:{property_id}"),
                    Button.inline("–í –º–µ–Ω—é", "/start")]
                ]

        await client.send_file(user_id, photos)

        await client.send_message(user_id, message, buttons=buttons)
        logger.info(f"Message with photos sent to {user_id}")

    except Exception as e:
        logger.error(f"Error getting property info: {e}")
        await client.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å—Ç—Ä–µ.")
        return


